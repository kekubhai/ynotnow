// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ideas         Idea[]
  comments      Comment[]
  votes         Vote[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Idea {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  tags        String[]
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  votes       Vote[]
  aiAnalysis  AiAnalysis?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  ideaId    String
  idea      Idea     @relation(fields: [ideaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ideaId    String
  idea      Idea     @relation(fields: [ideaId], references: [id])
  value     Int      // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())

  @@unique([userId, ideaId])
}

model AiAnalysis {
  id              String   @id @default(cuid())
  ideaId          String   @unique
  idea            Idea     @relation(fields: [ideaId], references: [id])
  feasibility     String   @db.Text
  monetization    String   @db.Text
  marketGap       String   @db.Text
  swot            String   @db.Text
  elevatorPitch   String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
} 